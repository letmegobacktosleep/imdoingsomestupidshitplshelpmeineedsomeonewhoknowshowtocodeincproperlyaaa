// NEED TO CHECK REPHLEX'S CODE FOR THE ADC SCANNING
// https://github.com/RephlexZero/qmk_firmware/blob/adc_testing/keyboards/rephlex/moonboard/


// https://discord.com/channels/1155086054622244904/1155145292119805963/1263077167995158629
// https://discord.com/channels/1155086054622244904/1155145292119805963/1265214808350003311
// ^^^^^ can guess down position from rest only



// write a program that does this

#include "custom_scanning.h"
#include "custom_scanning.c"

#define MATRIX_ROWS 8
#define MATRIX_COLS 16

static uint16_t max_value[MATRIX_ROWS][MATRIX_COLS];
static uint16_t min_value[MATRIX_ROWS][MATRIX_COLS];

for (uint8_t row = 0; row < MATRIX_ROWS; row++){
    for (uint8_t col = 0; col < MATRIX_COLS; col++){
        max_value[row][col] = 0;
        min_value[row][col] = 2047;
    }
}


for (uint8_t col = 0; col < MATRIX_COLS; col++){
    for (uint8_t row = 0; row < MATRIX_ROWS; row++){

        uint16_t raw = analog read 12 bit
        if (raw < 2048){
            raw = 2047 - raw;
        }
        else { // raw > 2047
            raw = raw - 2048
        }

        min_value = (raw < min_value) ? raw : min_value;
        max_value = (raw > max_value) ? raw : max_value;
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////

void pointing_device_driver_init(void) {
    return; // nothing to initialize here
}
uint16_t pointing_device_driver_get_cpi(void) {
    return 0; // no cpi to set
}
void pointing_device_driver_set_cpi(uint16_t cpi) {
    return; // no cpi to set
}

// https://docs.qmk.fm/features/pointing_device#analog-joystick
// https://docs.qmk.fm/features/pointing_device#custom-driver

//////////////////////////////////////////////////////////////////

// Add to config.h
#define SPLIT_TRANSACTION_IDS_USER USER_SYNC_A

// keyboard_post_init_user
transaction_register_rpc(USER_SYNC_B, user_sync_b_slave_handler);

void user_sync_b_slave_handler(uint8_t in_buflen, const void* in_data, uint8_t out_buflen, void* out_data) {
    // Cast data to correct type
    const calibration_parameters_t *m2s = (const calibration_parameters_t*) in_data;

    // Save config
    EEPROM_KB_PARTIAL_UPDATE(calibration_parameters, displacement);
}